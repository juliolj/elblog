---
title: "Dibujando un Fractal con Numpy"
author: "Julio López"
date: "2022-12-14"
categories: [Numpy]
image: "typewriter.jpg"
lang: es-ES
---

# Introducción

En este artículo visualizaremos el conjunto de Mandelbrot mediante un código sencillo de Python. La librería NumPy será de utilidad, ya que nos permitirá hacer cálculos en forma matricial. También usaremos la librería Matplotlib para hacer la visualización del conjunto.

El conjunto de Mandelbrot es probablemente uno de los fractales más populares y estudiados. Debe su nombre al matemático Benoit Mandelbrot quien junto a Gaston Julia fue uno de los principales impulsores de la teoría matemática de los fractales.

Curiosamente, encontrar en internet la definición formal de fractal no es tan sencillo, al menos en mi experiencia. Las *definiciones* que suelen aparecer en la red son descripciones más o menos vagas de las características que poseen (algunos) fractales. Debido a este peculiar hecho, y para los que alguna vez se hayan preguntado por la definición formal, a continuación la enunciamos:

::: {#def-fractal}
## Fractal

Un **fractal** es un conjunto cuya dimensión de Hausdorff-Besicovitch es estrictamente mayor que su dimensión topológica.
:::

Esta es la definición de fractal dada por el mismo Mandelbrot. No quisimos dejar de mencionarla, aunque en realidad no será en absoluto necesaria para los propósitos de este artículo. Podemos continuar aun si no sabemos qué cosa es la dimensión de Hausdorff-Besicovitch o la dimensión topológica.

Si quieres hacerte una idea *más intuitiva* de lo que es un fractal o de cómo luce, puedes salir a observar una nube, una montaña o continuar leyendo este artículo, porque más adelante mostraremos algunos bonitos ejemplos.

# Conjunto de Mandelbrot

El conjunto de Mandelbrot (al cual en adelante denotaremos por $M$) es un subconjunto del plano complejo $\mathbb{C}$. Su definición está estrechamente ligada a un proceso recursivo: se define una familia de sucesiones complejas parametrizadas por un número $c \in \mathbb{C}$ :

$$
\begin{align*} 
z_0 &= 0 \\ 
z_{n+1}(c) &= z_n^2+c 
\end{align*}
$$ {#eq-1}

El conjunto $M$ está formado por aquéllos valores de $c$ para los cuales la sucesión $\{z_i(c)\}_{i=0}^\infty$ está acotada. Por ejemplo, $c=1$ da lugar a la sucesión no acotada $\{0, 1, 2, 5 ,26, … \}$, por lo cual 1 no pertenece a $M$. En cambio, $c=-1$ sí pertenece a $M$, ya que produce la sucesión acotada $\{0, -1, 0 -1, … \}$.

Se sabe que $M$ está contenido en el disco de radio 2 centrado en el origen, es decir, $c \in M$ si y sólo si:

$|z_n(c)|\le2$ , para todo $n \ge0$.

Este hecho será clave más adelante para la visualización del conjunto $M$.

# Cazando al conjunto $M$

Lo siguiente es contar con un algoritmo que nos permita interrogar a puntos del plano complejo para determinar si pertenecen o no al conjunto $M$. La primera cuestión a tratar es: ¿A qué puntos del plano complejo vamos a interrogar? No dudaremos en usar cualquier información ya conocida sobre $M$ que nos sea de utilidad para simplificar nuestra búsqueda. Por ejemplo, a la luz del hecho mencionado en el último párrafo de la anterior sección, podríamos decidir interrogar solamente a puntos dentro del disco de radio 2 centrado en el origen. Pero, ya decididos en tomar cualquier atajo posible, haremos un poco de *trampa* para acotar aún más la *cacería* de puntos de $M$. A continuación, se muestra una imagen del conjunto de Mandelbrot tomada de [wikipedia](https://es.wikipedia.org/wiki/Conjunto_de_Mandelbrot):

![](800px-Mandelset_hires.png)

Considerando la figura anterior, vamos a proponer una región de búsqueda para el conjunto de Mandelbrot: el rectángulo dado por: $\{-2 \leq Re(c) \leq 0.75\}$ y $\{ -1.25 \leq Im(c) \leq 1.25 \}$. Para tomar puntos dentro de esta región, construimos en Python un arreglo matricial. Pero antes, empezamos por importar algunas librerías:

``` python
import numpy as np
import matplotlib.pyplot as plt
import matplotlib
from matplotlib import colors
```

Para construir el arreglo matricial, hacemos:

``` python
xmin, xmax, xcantPuntos = -2.00, +0.75, 1000
ymin, ymax, ycantPuntos = -1.25, +1.25, 1000
x = np.linspace(xmin, xmax, xcantPuntos)
y = np.linspace(ymin, ymax, ycantPuntos)
X, Y = np.meshgrid(x,y)
C = X + Y*1j 
```

Con el script anterior hemos construido un arreglo matricial `C` que contiene una *malla* de números complejos escogidos dentro de la región de búsqueda.

Consideremos la @eq-1, y hagamos una iteración de la sucesión correspondiente a cada punto del arreglo `C`. Comenzamos construyendo un arreglo `Z` del mismo tamaño que `C`, cuyos valores inicialmente son todos cero:

``` python
Z = np.zeros((xcantPuntos, ycantPuntos))
```

Ahora ejecutamos una iteración:

``` python
Z = Z**2 + C
```

Notar que con la instrucción anterior, estamos generando en un sólo paso la primera iteración de todas las sucesiones correspondientes a todos los puntos del arreglo `C` . Esto es una de las ventajas de usar Numpy para poder trabajar matricialmente.

Evidentemente, lo que sucede en la primera iteración es que `Z` toma los valores de `C`.

Visualicemos los módulos de los valores contenidos en `Z`:

``` python
M = np.abs(Z)
plt.figure(figsize=(6, 6), dpi=100)
plt.imshow(M)
plt.show()
```

Ahora requerimos dos cosas: aumentar el número de iteraciones y discriminar los puntos que no pertenecen a $M$. Para esto último, podemos identificar en qué casos el valor generado en la iteración actual ha sobrepasado el límite del círculo de radio 2. A estas posiciones del arreglo les reasignamos el valor de 2, con lo que aseguramos que en la siguiente iteración el valor obtenido seguirá fuera del círculo de radio 2. Y volvemos a visualizar los módulos de los nuevos valores:

``` python
Z = Z**2 + C
idxg = np.greater_equal(abs(Z), 2)
Z[idxg] = 2
M = np.abs(Z)
plt.figure(figsize=(6, 6), dpi=100)
plt.imshow(M)
plt.show()
```

Ejecutamos de nuevo el script anterior (iteración 3):

Iteración 4:

iteración 5:

Iteración 6:

Poco a poco va emergiendo en la imagen el conjunto de Mandelbrot. Los puntos que no pertenecen al conjunto se colorean de amarillo. Hasta ahora hemos realizado muy pocas iteraciones, por lo cual es de esperarse que haya aún muchos puntos que no debieran estar en $M$ y que aparecen como si estuvieran en el conjunto. Para tener una imagen perfecta de $M$, necesitaríamos generar una cantidad infinita de puntos de cada una de las sucesiones. Como esto no es posible, sólo nos queda aumentar el número de iteraciones para que el conjunto se visualice cada vez de forma más cercana al conjunto exacto.

Aquí se muestra *el conjunto* $M$, después de 500 iteraciones:

## Otra forma de visualizar $M$

También podemos visualizar el conjunto de Mandelbrot al registrar las iteraciones necesarias para que la sucesión asociada a un punto $c$ escape del círculo de radio 2.

En el siguiente código construimos la función `mandelbrot(iter, m)`, en la cual se incluyen las dos formas de visualización descritas anteriormente.

Además del número de iteraciones, el usuario puede definir como parámetro de entrada el exponente en la familia de sucesiones, es decir, vamos a generalizar a sucesiones de la forma:

$$
\begin{align*} 
z_0 &= 0 \\ 
z_{n+1}(c) &= z_n^m+c 
\end{align*}
$$

donde $m$ puede ser cualquier entero.

``` python
def mandelbrot(iter, m):
    
    xmin, xmax, xcantPuntos = -2.00, +0.75, 1000
    ymin, ymax, ycantPuntos = -1.25, +1.25, 1000

    x = np.linspace(xmin, xmax, xcantPuntos)
    y = np.linspace(ymin, ymax, ycantPuntos)

    X, Y = np.meshgrid(x,y)

    C = X + Y*1j
    Z = np.zeros((xcantPuntos, ycantPuntos))
    N = np.zeros((xcantPuntos, ycantPuntos))

    for k in range(iter):
        Z = Z**m + C

        idxg = np.greater_equal(abs(Z), 2)
        Z[idxg] = 2
        idx  = np.less(abs(Z), 2)
        N[idx] = k

    M = np.abs(Z)

    plt.figure(figsize=(6, 6), dpi=100)
    plt.imshow(M)
    plt.show()

    plt.figure(figsize=(6,6), dpi=100)
    plt.imshow(N)
    plt.show()
```

Veamos algunos ejemplos.

``` python
mandelbrot(20, 2)
```

Observamos que con la segunda forma de visualizar el conjunto $M$, la parte amarilla representa los puntos cuya sucesión asociada no ha escapado después de 20 iteraciones.

Al cambiar el exponente de la familia de sucesiones, podemos generar visualizaciones interesantes de otros conjuntos:

``` python
  mandelbrot(20, 3)
```

``` python
mandelbrot(20,-4)
```

Interesantemente, para valores negativos de $m$, la visualización por tiempo de escape no parece ser muy informativa.

# Conclusión

Hemos presentado una forma sencilla de visualizar el conjunto de Mandelbrot y de algunos otros conjuntos que resultan al cambiar el exponente de la sucesión dada por la @eq-1. Para ello, se aplicaron funciones básicas de las librerías NumPy y Matplotlib.

En términos estéticos, quizá los resultados logrados aquí no se acercan en calidad a los de otras propuestas en las que también se utiliza Python. Nuestro objetivo aquí es ejemplificar cómo el uso de NumPy y Matplotlib nos permite atacar una tarea no trivial de visualización mediante un código extremadamente sencillo.

Esperamos que con lo aprendido hasta aquí el lector, si lo desea, pueda ahondar un poco más en este interesante tema o bien simplemente que pueda pasar un rato divertido generando sus propias visualizaciones.
